ðŸ“Œ Gerenciamento de Bancos de Dados

-Listar Bancos de Dados:
SHOW DATABASES;

Lista todos os bancos de dados existentes no servidor.


-Criar um Banco de Dados:
CREATE DATABASE nome_do_banco;

Cria um novo banco de dados.


-Selecionar um Banco de Dados:
USE nome_do_banco;

Seleciona o banco de dados para as operaÃ§Ãµes seguintes.


-Deletar um Banco de Dados:
DROP DATABASE sistemacadastro;

Remove permanentemente o banco de dados sistemacadastro e todos os seus dados.
AtenÃ§Ã£o: Esse comando Ã© irreversÃ­vel sem um backup.



ðŸ“Œ Gerenciamento de Tabelas

-Listar Tabelas:
SHOW TABLES;

Lista todas as tabelas do banco de dados selecionado.


-Criar uma Tabela:
CREATE TABLE nome_da_tabela (
    id INT AUTO_INCREMENT PRIMARY KEY,
    coluna1 VARCHAR(50),
    coluna2 INT
);

Cria uma nova tabela com as colunas definidas.


-Descrever a Estrutura de uma Tabela:
DESCRIBE nome_da_tabela;

Mostra a estrutura da tabela, incluindo colunas, tipos de dados, chaves, etc.


ðŸ“Œ OperaÃ§Ãµes de ManipulaÃ§Ã£o de Dados

-Selecionar Dados:
SELECT * FROM clientes;

Busca e retorna todas as colunas e registros da tabela clientes.


-Inserir Dados:
INSERT INTO clientes (nome, email, idade)
VALUES ('JoÃ£o Silva', 'joao@email.com', 30);

Insere um novo registro na tabela clientes.


-Atualizar Dados:
UPDATE usuarios
SET nome = "nome teste", email = "teste.com"
WHERE nome = "william";

Atualiza os registros da tabela usuarios onde o nome seja "william".


-Excluir Dados com CondiÃ§Ã£o:
DELETE FROM clientes
WHERE idade < 18;

Exclui os registros da tabela clientes onde a idade seja menor que 18.



ðŸ“Œ Uso da ClÃ¡usula WHERE


IMPORTANTE:
Ao utilizar comandos como DELETE ou UPDATE, sempre inclua a clÃ¡usula WHERE para garantir que apenas os registros desejados sejam afetados.

Exemplo de DELETE sem WHERE (CUIDADO!):


DELETE FROM clientes;
Este comando remove todos os registros da tabela clientes.

Exemplo de UPDATE sem WHERE (CUIDADO!):


UPDATE usuarios
SET nome = "novo nome", email = "novoemail@exemplo.com";
Este comando atualiza todos os registros da tabela usuarios, o que pode levar a alteraÃ§Ãµes indesejadas.

Boas PrÃ¡ticas:

Sempre utilizar a clÃ¡usula WHERE nos comandos que alteram ou removem dados para evitar aÃ§Ãµes em massa.
Realizar backups regularmente antes de executar operaÃ§Ãµes destrutivas.
Testar os comandos em um ambiente de desenvolvimento para confirmar que somente os registros desejados serÃ£o afetados.